#!/usr/bin/env python3

import sys

INFO_MSG="""#Generated by makefilegenerator.py
#autor: Lukasz Folwarczyk
"""

CONF_MSG="""vpath %.cpp src
vpath %.h include

bd=build
CC=g++
std=c++11
prog_name=program

.PHONY: all

all: $(prog_name)
"""

CLEAN_MSG=""".PHONY: clean
clean:
\t@echo "Usówam program ..."
\t@rm -r -f $(bd)
\t@rm -f $(prog_name)
\t@echo "Program usunięty"
"""

def fill_files_names(makef):
	
	files_cpp = sys.argv[1:]
	files_no = len(files_cpp)

	files_o = [cppToO.replace(".cpp", ".o") for cppToO in files_cpp]
	
	obj = ""
	
	for name in files_o:
		obj += ("$(bd)/"+name + " ")

	print("$(prog_name): {}".format(obj), file=makef)
	print("\t@$(CC) --std=$(std) $(^) -o $(@)", file=makef)
	print("\t@echo 'Wygenerowano plik Makefile ;)'\n\n", file=makef)
	for i in range(len(files_o)):
		print("$(bd)/{}: {}". format(files_o[i], files_cpp[i]), file=makef)
		print("\t@mkdir -p $(bd)", file=makef)
		print("\t@$(CC) --std=$(std) -I include -c $(<) -o $(@)\n",file=makef)




def main():
	
	makefile = open("Makefile", "w")
	
	print(INFO_MSG, file=makefile)
	print(CONF_MSG, file=makefile)

	fill_files_names(makefile)

	print(CLEAN_MSG, file=makefile)	

	
	makefile.close()


if __name__ == "__main__":
	main()


